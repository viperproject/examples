define pre1(a, l, r) 0 <= l && l < r && r <= len(a)
define pre2(a, l, r) forall i: Int :: l <= i && i < r ==> acc(loc(a, i).val)
define post1(a, l, r) pre2(a, l, r)
define post2(a, l, r) forall i: Int :: l <= i && i < r ==>
                          (old(loc(a, i).val == from)
                            ? loc(a, i).val == to
                            : loc(a, i).val == old(loc(a, i).val))

method Replace(a: Array, left: Int, right: Int, from: Int, to: Int)
  requires pre1(a, left, right)
  requires pre2(a, left, right)
  ensures  post1(a, left, right)
  ensures  post2(a, left, right)
{
  if (right - left <= 1) {
    if(loc(a, left).val == from) {
      loc(a, left).val := to
    }
  } else {
    var mid: Int := left + (right - left) \ 2

    //fork-left
    exhale pre1(a, left, mid)
    exhale pre2(a, left, mid)

    //fork-right
    exhale pre1(a, mid, right)
    exhale pre2(a, mid, right)

    //join-left
    inhale post1(a, left, mid)
    inhale post2(a, left, mid)

    //join-right
    inhale post1(a, mid, right)
    inhale post2(a, mid, right)
  }
}

method Client(a: Array, b: Array)
  requires 0 < len(a) && 0 < len(b)
  requires forall i: Int :: 0 <= i && i < len(a) ==> acc(loc(a, i).val)
  requires forall i: Int :: 0 <= i && i < len(b) ==> acc(loc(b, i).val)
  requires ItemAt(b,0) == 5
{
  Replace(a, 0, len(a), 5, 7)
  assert ItemAt(b,0) == 5  // uses function framing
}

function ItemAt(a: Array, i: Int): Int
  requires 0 <= i && i < len(a)
  requires acc(loc(a, i).val)
{ loc(a, i).val }

/* Encoding of arrays */

field val: Int

domain Array {
  function loc(a: Array, i: Int): Ref
  function len(a: Array): Int
  function first(r: Ref): Array
  function second(r: Ref): Int

  axiom all_diff {
    forall a: Array, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: Array :: len(a) >= 0
  }
}
