field Exercise4__Integer_value: Int

field Ref__Integer_value: Int

method Exercise4__zip(diz: Ref, a: Seq[Ref], b: Seq[Ref], res: Seq[Ref])
  requires diz != null
  requires |a| == |b|
  requires |res| == 2 * |a|
  requires (forall i: Int :: (i in [0..|a|)) ==> acc(a[i].Ref__Integer_value, write))
  requires (forall i: Int :: (i in [0..|b|)) ==> acc(b[i].Ref__Integer_value, write))
  requires (forall i: Int :: (i in [0..|res|)) ==> acc(res[i].Ref__Integer_value, write))
  ensures |res| == 2 * |a|
  ensures |a| == |b|
  ensures |res| == 2 * |b|
  ensures (forall i: Int :: (i in [0..|a|)) ==> acc(a[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (i in [0..|b|)) ==> acc(b[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (i in [0..|res|)) ==> acc(res[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (i in [0..|a|)) ==> (res[2 * i].Ref__Integer_value == a[i].Ref__Integer_value))
  ensures (forall i: Int :: (0 <= i) && (i % 2 == 1) && (i < |res|) ==> (res[i].Ref__Integer_value == b[i \ 2].Ref__Integer_value))
  ensures (forall i: Int :: (i in [0..|b|)) ==> (res[2 * i + 1].Ref__Integer_value == b[i].Ref__Integer_value))
  ensures (forall i: Int :: (0 <= i) && (i % 2 == 0) && (i < |res|) ==> (res[i].Ref__Integer_value == a[i \ 2].Ref__Integer_value))
{
  var k: Int
  var __flatten_1: Int
  var __flatten_2: Int
  var __flatten_3: Int
  var __flatten_4: Int
  var __flatten_5: Ref
  var __flatten_6: Ref
  var __flatten_7: Int
  var __flatten_8: Ref
  var __flatten_9: Ref
  var __flatten_10: Int
  k := 0
  while (k < |res|)
    invariant 0 <= k
    invariant k % 2 == 0
    invariant k <= |res|
    invariant |a| == |b|
    invariant |res| == 2 * |a|
    invariant (forall i: Int :: (i in [0..|a|)) ==> acc(a[i].Ref__Integer_value, write))
    invariant (forall i: Int :: (i in [0..|b|)) ==> acc(b[i].Ref__Integer_value, write))
    invariant (forall i: Int :: (i in [0..|res|)) ==> acc(res[i].Ref__Integer_value, write))
    invariant (forall i: Int :: (0 <= i) && (i % 2 == 0) && (i < k) ==> (res[i].Ref__Integer_value == a[i \ 2].Ref__Integer_value))
    invariant (forall i: Int :: (0 <= i) && (i % 2 == 1) && (i < k) ==> (res[i].Ref__Integer_value == b[i \ 2].Ref__Integer_value))
    invariant (forall i: Int :: (i in [0..k \ 2)) ==> (res[2 * i].Ref__Integer_value == a[i].Ref__Integer_value))
    invariant (forall i: Int :: (i in [0..k \ 2)) ==> (res[2 * i + 1].Ref__Integer_value == b[i].Ref__Integer_value)) 
  {
    __flatten_5 := a[k \ 2]
    __flatten_4 := __flatten_5.Ref__Integer_value
    __flatten_1 := __flatten_4
    __flatten_6 := res[k]
    __flatten_6.Ref__Integer_value := __flatten_1
    __flatten_8 := b[k \ 2]
    __flatten_7 := __flatten_8.Ref__Integer_value
    __flatten_2 := __flatten_7
    __flatten_9 := res[k + 1]
    __flatten_9.Ref__Integer_value := __flatten_2
    __flatten_10 := k + 2
    __flatten_3 := __flatten_10
    k := __flatten_3
  }
  assert k == |res|
  assert |res| \ 2 == k \ 2
  assert (forall i: Int :: (i in [0..|res| \ 2)) ==> (res[2 * i].Ref__Integer_value == a[i].Ref__Integer_value))
  assert (forall i: Int :: (0 <= i) && (i % 2 == 1) && (i < |res|) ==> (res[i].Ref__Integer_value == b[i \ 2].Ref__Integer_value))
  assert (forall i: Int :: (i in [0..|res| \ 2)) ==> (res[2 * i + 1].Ref__Integer_value == b[i].Ref__Integer_value))
  assert (forall i: Int :: (0 <= i) && (i % 2 == 0) && (i < |res|) ==> (res[i].Ref__Integer_value == a[i \ 2].Ref__Integer_value))
}

method Exercise4__Exercise4() returns (sys__result: Ref)
  ensures sys__result != null
{
  var diz: Ref
  var __flatten_11: Ref
  __flatten_11 := new(Exercise4__Integer_value)
  diz := __flatten_11
  sys__result := diz
  assert sys__result != null
  inhale false
}