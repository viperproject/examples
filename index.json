{
  "Viper Examples": {
		"description" : "This webpage showcases several interesting examples that demonstrate features of the <a href=\"http://www.pm.inf.ethz.ch/research/viper.html\">Viper verification infrastructure</a>",
		"isCategory" : true
	},

  
  
  
  "binary-search/binary-search-array" : {
    "name": "Binary Search (Array)",
    "description": "Binary search in a sorted (mutable) array",
    "category": "Viper Examples"
  },
  
  "binary-search/binary-search-seq" : {
    "name": "Binary Search (Seq)",
    "description": "Binary search in a sorted (mathematical) sequence",
    "category": "Viper Examples"
  },

  "graph-copy/graph-copy" : {
    "name": "Graph Copy",
    "description": "Duplicating a heap-allocated (mutable) graph",
    "category": "Viper Examples"
  },

  "graph-marking/graph-marking" : {
    "name": "Graph Marking",
    "description": "A graph marking algorithm (in the spirit of mark-and-sweep garbage collectors). Note that the example is supposed to yield 1 verification error (the encoding of a false reachability check).",
    "category": "Viper Examples"
  },

  "max_array/max-array-elimination" : {
    "name": "Array Max (by elimination)",
    "description": "Finding the maximum in an array by elimination (COST IC0701 Verification Competition 2011)",
    "category": "Viper Examples"
  },

  "max_array/max-array-standard" : {
    "name": "Array Max (straight-forward)",
    "description": "Finding the maximum in an array the straight-forward way",
    "category": "Viper Examples"
  },
  
  "quickselect/arrays_quickselect_rec" : {
    "name": "Quickselect",
    "description": "An encoding of the Quickselect algorithm over arrays",
    "category": "Viper Examples"
  },
  
  
  
  
  "vmcai2016/linked-list-predicates": {
		"name": "Linked-List (Predicates)",
		"description": "Inserting into an ordered linked-list which is specified via a recursively-defined predicate. The loop invariant uses a recursively-defined list segment predicate to bookkeep permissions.",
		"category": "Viper Examples"
	},

	"vmcai2016/linked-list-predicates-with-wands": {
		"name": "Linked-List (Magic Wands)",
		"description": "A variant of the 'Linked-List (Predicates)' example, in which the loop invariant uses a magic wand to bookkeep permissions. Note: this example uses a feature which is currently only supported by the default verifier.",
		"category": "Viper Examples"
	},

	"vmcai2016/arraylist-quantified-permissions": {
		"name": "Array-List (Quantified Permissions)",
		"description": "Inserting into an array-list which is specified via quantified permissions (iterating separating conjunction).",
		"category": "Viper Examples"
	},

	"vmcai2016/encoding-adts": {
		"name": "Encoding ADTs",
		"description": "An encoding of a Haskell-style Nil-Cons-list, alongside proofs of certain properties of the encoded abstract data type, and a pattern match exhaustiveness check. Note that the example is supposed to yield 1 verification error (the encoding of a failed exhaustiveness check).",
		"category": "Viper Examples"
	}
}
