{
	"./RSLSpinlock": {
		"name": "RSL Spinlock Example",
		"description": "(RSLSpinlock) Encoding of Figure 7 Spinlock example from RSL paper",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},

	"./RelAcqDblMP": {
		"name": "Release-Acquire Double Message-Passing",
		"description": "(RelAcqDblMP) Encoding of Figure 8 message passing example from RSL paper",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},

	"./FencesDblMP": {
		"name": "Fence-Based Double Message-Passing",
		"description": "(FencesDblMP) Encoding of Figure 2 double message passing example from FSL paper",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./FencesDblMPSplit": {
		"name": "Fence-Based Double Message-Passing, Single Atomic Location",
		"description": "(FencesDblMPSplit) Adaptation of program from Figure 2 of FSL paper (with CAS accesses), using a single atomic location and correspondingly more-complex invariant which must be split between threads",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./FencesDblMPAcqRewriting": {
		"name": "Fence-Based Double Message-Passing, Single Atomic Location, Invariant Rewriting",
		"description": "(FencesDblMPAcqRewriting) Adaptation of program from Figure 2 example from FSL paper, using a single atomic location with invariant stated such that automatic handling of conjuncts doesn't suffice; exercises invariant rewriting support",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./RelAcqDblMPSplit": {
		"name": "Release-Acquire Double Message-Passing, Invariant Splitting",
		"description": "(RelAcqDblMPSplit) Adaptation of program from Figure 2 of FSL paper, using Release/Acquire accesses, a single atomic location and correspondingly more-complex invariant which must be split between threads",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./RelAcqARC": {
		"name": "Rust Reference Counter (Acquire/Release variant)",
		"description": "(RelAcqARC) An adaptation of the Rust reference counting example from FSL++ paper. Several strengthened access modes allow for a proof using release/acquire",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./ARCStronger": {
		"name": "Rust Reference Counter (Fences variant)",
		"description": "(ARCStronger) An adaptation of the Rust reference counting example from FSL++ paper. Two strengthened access modes allow for a proof using atomics and fences",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./ARCRelaxed": {
		"name": "Rust Reference Counter (original)",
		"description": "(ARCRelaxed) Encoding of original example from FSL++ paper, using same specs as previous example. As expected, the example <b>fails to verify</b> (needs a more-sophisticated specification)",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./FollyRWSpinlock_err": {
		"name": "Facebook Folly Reader-Writer spinlock code",
		"description": "(FollyRWSpinlock_err) Encoding of the core reader-lock and writer-lock functions from Facebook's open-source Folly library. Two functions <b>fail to verify</b>, leading to three error messages (as expected with the given specifications, which cannot capture the cumulative effects of multiple atomic updates)",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./FollyRWSpinlock_err_mod": {
		"name": "Facebook Folly Reader-Writer spinlock (relacq)",
		"description": "(FollyRWSpinlock_err_mod) Encoding of the core reader-lock and writer-lock functions from Facebook's open-source Folly library, simplified to use only relacq accesses (see FollyRWSpinlock_err for the original). Two functions <b>fail to verify</b>, leading to three error messages (as expected with the given specifications, which cannot capture the cumulative effects of multiple atomic updates)",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./FollyRWSpinlockStronger": {
		"name": "Facebook Folly Reader-Writer spinlock code, two modified functions",
		"description": "(FollyRWSpinlockStronger) Encoding of the core reader-lock and writer-lock functions from Facebook's open-source Folly library. Two functions have been re-implemented with slightly less-efficient code whose correctness <b>can</b>, however, be captured by RSL-style atomic invariants.",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"./FollyRWSpinlockStronger_mod": {
		"name": "Facebook Folly Reader-Writer spinlock code (relacq), two modified functions",
		"description": "(FollyRWSpinlockStronger_mod) Encoding of the core reader-lock and writer-lock functions from Facebook's open-source Folly library, simplified to use only relacq accesses (see FollyRWSpinlockStronger for the original). Two functions have been re-implemented with slightly less-efficient code whose correctness <b>can</b>, however, be captured by RSL-style atomic invariants.",
		"category": "Viper Encoding of RSL Logics (Examples)"
	},
	
	"Viper Encoding of RSL Logics (Examples)" : {
		"description" : "This webpage contains Viper-encoded examples referenced in the paper \"Automating Deductive Verification for Weak Memory Programs\" See also <a href=\"http://viper.ethz.ch/prototype-rsl-encoding\">the prototype tool</a>.",
		"isCategory" : true,
		"excludedVerifiers": ["silicon", "silicon-nightly"]
	}
}
