{
	"./RSLFigure7": {
		"name": "RSL Figure 7",
		"description": "Encoding of Figure 7 Lock example from RSL paper",
		"category": "CAV'17",
		"excludedVerifiers": ["carbon", "carbon-nightly"]
	},

	"./RSLFigure8": {
		"name": "RSL Figure 8",
		"description": "Encoding of Figure 8 message passing example from RSL paper",
		"category": "CAV'17"
	},

	"./FSLFigure2": {
		"name": "FSL Figure 2",
		"description": "Encoding of Figure 2 double message passing example from FSL paper",
		"category": "CAV'17"
	},
	
	"./FSLFigure2Variant": {
		"name": "FSL Figure 2 single atomic variant",
		"description": "Variant of Figure 2 example from FSL paper, using a single atomic location and correspondingly more-complex invariant",
		"category": "CAV'17"
	},
	
	"./FSLFigure2VariantWithRewriting": {
		"name": "FSL Figure 2 single atomic variant with invariant rewriting",
		"description": "Variant of Figure 2 example from FSL paper, using a single atomic location with invariant stated such that automatic handling of conjuncts doesn't suffice",
		"category": "CAV'17"
	},
	
	"./FSLFigure2VariantWithRelAcq": {
		"name": "FSL Figure 2 single atomic variant with Rel/Acq accesses instead of relaxed + fences",
		"description": "Variant of Figure 2 example from FSL paper, using acquire reads instead of compare and swap operations",
		"category": "CAV'17"
	},
	
	"./RefCountMark1": {
		"name": "Rust Reference Counting version 1",
		"description": "Encoding of first variant of Rust reference counting example from FSL++ paper. Several stronger access modes allow for a proof using release/acquire",
		"category": "CAV'17"
	},
	
	"./RefCountMark2": {
		"name": "Rust Reference Counting version 2",
		"description": "Encoding of second variant of Rust reference counting example from FSL++ paper. A few stronger access modes allow for a proof using atomics and fences",
		"category": "CAV'17"
	},
	
	"./RefCountMarkOriginalCode": {
		"name": "Rust Reference Counting version 3",
		"description": "Encoding of original example from FSL++ paper, using same specs as previous example. As expected, the example <b>fails to verify</b> (needs a more-sophisticated specification)",
		"category": "CAV'17"
	},
	
	"./FollyRWSpinlock": {
		"name": "Facebook Folly Reader-Writer spinlock code",
		"description": "Encoding of several functions from Facebook's open-source Folly library. Two functions <b>fail to verify</b>, leading to three error messages (as expected with the given specifications, which cannot capture the cumulative effects of multiple atomic updates)",
		"category": "CAV'17"
	},
	
	"CAV'17" : {
		"description" : "This webpage contains the full examples referenced in the paper \"Automating Deductive Verification for Weak Memory Programs\" submitted to CAV 2017.",
		"isCategory" : true,
		"excludedVerifiers": ["silicon", "silicon-nightly"]
	}
}
