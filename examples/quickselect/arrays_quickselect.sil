field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function len(a: IArray): Int

  axiom all_diff {
    forall a1: IArray, a2: IArray, i: Int, j: Int :: {loc(a1, i), loc(a2, j)}
      (a1 != a2 || i != j) ==> loc(a1, i) != loc(a2, j)
  }

  axiom len_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}

/* https://en.wikipedia.org/wiki/Quickselect
 *
 * Changes w.r.t. the wikipedia code:
 *   - select returns the index of the n-th smallest element, not the element
 *     itself
 */

method swap(a: IArray, i: Int, j: Int)
  requires 0 <= i && i < len(a)
  requires 0 <= j && j < len(a)
  requires acc(loc(a, i).val)
  requires i != j ==> acc(loc(a, j).val)
  ensures acc(loc(a, i).val)
  ensures i != j ==> acc(loc(a, j).val)
  ensures loc(a, i).val == old(loc(a, j).val)
  ensures loc(a, j).val == old(loc(a, i).val)
{
  var t: Int := loc(a, i).val
  loc(a, i).val := loc(a, j).val
  loc(a, j).val := t
}

method partition(a: IArray, left: Int, right: Int, pivotIndex: Int) returns (storeIndex: Int)
  requires 0 <= left && left < right
  // requires 0 <= left && left <= len(a)
  requires /* 0 <= right && */ right < len(a)
  requires left <= pivotIndex && pivotIndex <= right
  requires forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)

  ensures left <= storeIndex && storeIndex <= right
  ensures forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)
  ensures loc(a, storeIndex).val == old(loc(a, pivotIndex).val)
  ensures forall i: Int :: left <= i && i < storeIndex  ==> loc(a, i).val < loc(a, storeIndex).val
  ensures forall i: Int :: storeIndex < i && i <= right ==> loc(a, storeIndex).val <= loc(a, i).val
  // ensures forall i: Int :: i in [left..right+1)
    // i < pivotIndex
      // ? loc(a, i).val < loc(a, pivotIndex).val
      // : loc(a, pivotIndex).val <= loc(a, i).val
      
  /* TODO: Ensure that the post-array is a permutation of the pre-array */
{
//// assume pivotIndex != right
  var pivotValue: Int := loc(a, pivotIndex).val
  swap(a, pivotIndex, right)  // Move pivot to end

  storeIndex := left
  var j: Int := left

  while (j < right)
    invariant left <= j && j <= right
    invariant left <= storeIndex && storeIndex <= j
    invariant forall i: Int :: i in [left..right+1) ==> acc(loc(a, i).val)
    invariant forall i: Int :: i in [left..storeIndex) ==> loc(a, i).val < pivotValue
    invariant forall i: Int :: i in [storeIndex..j) ==> pivotValue <= loc(a, i).val
    invariant loc(a, right).val == pivotValue
  {
    if (loc(a, j).val < pivotValue) {
      swap(a, j, storeIndex)
      storeIndex := storeIndex + 1
    }

    j := j + 1
  }

  assert loc(a, right).val == pivotValue

  swap(a, right, storeIndex)  // Move pivot to its final place
  assert loc(a, storeIndex).val == pivotValue
  assert pivotValue == old(loc(a, pivotIndex).val)

  assert loc(a, storeIndex).val == old(loc(a, pivotIndex).val)
}

method select_rec(a: IArray, left: Int, right: Int, n: Int) returns (idx: Int)
  requires 0 <= left && left <= right && right < len(a)
  requires left <= n && n <= right
  requires forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)

  ensures forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)
  
  // ensures exists i: Int :: left <= i && i <= right && loc(a, i).val == elem
  ensures left <= idx && idx <= right
  ensures idx == n /* P1 */
  
  /* TODO: The next two postconditions require the recursive calls to select_rec
   * to guarantee that the array has been permutated.
   */
  ensures forall i: Int :: left <= i && i < idx  ==> loc(a, i).val   <  loc(a, idx).val /* P2 */
  ensures forall i: Int :: idx < i && i <= right ==> loc(a, idx).val <= loc(a, i).val
  /* NOTE: From P1 and P2 it follows that loc(a, idx).val is the n-th smallest element */
  
  /* TODO: Ensure that the post-array is a permutation of the pre-array */
{
  if (left == right) {
assume false
    /* If the list contains only one element, return it */
    // elem := loc(a, left).val
    idx := left
  } else {
    var pivotIndex: Int
    inhale left <= pivotIndex && pivotIndex <= right /* Non-det. choose a pivot index */

    pivotIndex := partition(a, left, right, pivotIndex)
// assert forall i: Int :: left <= i && i < pivotIndex ==> loc(a, i).val   <  loc(a, pivotIndex).val
// assert forall i: Int :: pivotIndex < i && i <= right ==> loc(a, pivotIndex).val <= loc(a, i).val
    // assume  forall i: Int :: left <= i && i <= right ==> (
              // exists j: Int :: left <= j && j <= right && old(loc(a, i).val) == loc(a, j).val
            // )

    /* The pivot is in its final sorted position */

    if (n == pivotIndex) {
assume false
      // elem := loc(a, n).val
      idx := n
    } elsif (n < pivotIndex) {
assume false
      // elem := select_rec(a, left, pivotIndex - 1, n)
      idx := select_rec(a, left, pivotIndex - 1, n)
    } else {
// assume false
      // elem := select_rec(a, pivotIndex + 1, right, n)
      idx := select_rec(a, pivotIndex + 1, right, n)
    }
  }
}

// function elems(a: IArray, left: Int, right: Int): Seq[Int]
  // requires 0 <= left && left <= right && right < len(a)
  // requires forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)
// { left == right ? Seq[Int]() : Seq(loc(a, left).val) ++ elems(a, left + 1, right) }
