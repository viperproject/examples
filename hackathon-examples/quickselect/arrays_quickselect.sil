field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}
/* https://en.wikipedia.org/wiki/Quickselect
 *
 * Changes w.r.t. the wikipedia code:
 *   - Select returns the index of the n-th smallest element, not the element
 *     itself
 *   - In order to be able to specify that an array has been permuted by
 *     certain operations, the permutation witness is made explicit
 *     (Leino, Monahan - Dafny meets the Verification Benchmarks Challenge)
 */

method swap(a: IArray, i: Int, j: Int)
  requires 0 <= i && i < len(a)
  requires 0 <= j && j < len(a)
  requires acc(loc(a, i).val)
  requires i != j ==> acc(loc(a, j).val)
  ensures acc(loc(a, i).val)
  ensures i != j ==> acc(loc(a, j).val)
  ensures loc(a, i).val == old(loc(a, j).val)
  ensures loc(a, j).val == old(loc(a, i).val)
{
  var t: Int := loc(a, i).val
  loc(a, i).val := loc(a, j).val
  loc(a, j).val := t
}

define permuted(a, left, pw)
  forall i: Int :: 0 <= i && i < |pw| ==> loc(a, left + i).val == old(loc(a, pw[i]).val)

method partition(a: IArray, left: Int, right: Int, pivotIndex: Int) returns (storeIndex: Int, pw: Seq[Int])
  /* All indices are valid and their relative order is satisfied */
  requires 0 <= left && left < right && right < len(a)
  requires left <= pivotIndex && pivotIndex <= right
  /* Permissions to the array segment with indices [left..right] */
  requires forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)

  /* Returned index is a valid index */
  ensures left <= storeIndex && storeIndex <= right
  /* Return all taken permissions */
  ensures forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)
  /* The pivot element is now stored at a[storeIndex] */
  ensures loc(a, storeIndex).val == old(loc(a, pivotIndex).val)
  /* All elements left (right) of the pivot are smaller than (at least as big as) the pivot */
  ensures forall i: Int :: left <= i && i < storeIndex  ==> loc(a, i).val < loc(a, storeIndex).val
  ensures forall i: Int :: storeIndex < i && i <= right ==> loc(a, storeIndex).val <= loc(a, i).val
  /* pw witnesses a permutation of the array segment */
  ensures |pw| == right + 1 - left
  ensures forall i: Int :: 0 <= i && i < |pw| ==> left <= pw[i] && pw[i] <= right
  ensures forall i: Int, j: Int :: 0 <= i && i < j && j < |pw| ==> pw[i] != pw[j]
  /* The array segment has been permuted */
  ensures permuted(a, left, pw)
{
  var pivotValue: Int := loc(a, pivotIndex).val

  pw := [left..right + 1)

  swap(a, pivotIndex, right) /* Move pivot to end, i.e. it is now at a[right] */

  /* Swap pw[pivotIndex - left] and pw[right - left], which corresponds to
   * swapping a[pivotIndex] and a[right]
   */
  pw := pw[pivotIndex - left := pw[right - left]]
          [right - left := pw[pivotIndex - left]]

  storeIndex := left
  var j: Int := left

  while (j < right)
    /* All indices are valid and their relative order is satisfied */
    invariant left <= j && j <= right
    invariant left <= storeIndex && storeIndex <= j
    /* Permissions to the array segment.
     * NOTE: Permissions to a[left..right) would suffice, and it would preserve
     * information about the location of the pivot element, i.e. it would make
     * invariant INV-PIV unnecessary. The current invariant, however, makes it
     * possible to re-use the permuted(...) assertion.
     */
    invariant forall i: Int :: i in [left..right+1) ==> acc(loc(a, i).val)
    invariant loc(a, right).val == pivotValue /* INV-PIV */
    /* All elements left (right) of the pivot are smaller than (at least as big as) the pivot */
    invariant forall i: Int :: i in [left..storeIndex) ==> loc(a, i).val < pivotValue
    invariant forall i: Int :: i in [storeIndex..j) ==> pivotValue <= loc(a, i).val
    /* pw witnesses a permutation of the already visited array segment */
    invariant |pw| == right + 1 - left
    invariant forall i: Int :: 0 <= i && i < |pw| ==> left <= pw[i] && pw[i] <= right
    invariant forall i: Int, k: Int :: 0 <= i && i < k && k < |pw| ==> pw[i] != pw[k]
    /* The array segment has been permuted */
    invariant permuted(a, left, pw)
  {
    if (loc(a, j).val < pivotValue) {

      swap(a, j, storeIndex)

      /* Swap pw[storeIndex - left] and pw[j - left], which corresponds to
       * swapping a[storeIndex] and a[j]
       */
      pw := pw[storeIndex - left := pw[j - left]]
              [j - left := pw[storeIndex - left]]

      storeIndex := storeIndex + 1
    }

    j := j + 1
  }

  swap(a, right, storeIndex)  /* Move pivot to its final place */
}

method select_rec(a: IArray, left: Int, right: Int, n: Int) returns (idx: Int, pw: Seq[Int])
  requires 0 <= left && left <= right && right < len(a)
  requires left <= n && n <= right
  requires forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)

  ensures forall i: Int :: left <= i && i <= right ==> acc(loc(a, i).val)

  // ensures exists i: Int :: left <= i && i <= right && loc(a, i).val == elem
  ensures left <= idx && idx <= right
  ensures idx == n /* P1 */

  /* TODO: The next two postconditions require the recursive calls to select_rec
   * to guarantee that the array has been permuted.
   */
  ensures forall i: Int :: left <= i && i < idx  ==> loc(a, i).val   <  loc(a, idx).val /* P2 */
  ensures forall i: Int :: idx < i && i <= right ==> loc(a, idx).val <= loc(a, i).val
  /* NOTE: From P1 and P2 it follows that loc(a, idx).val is the n-th smallest element */

  /* pw witnesses a permutation of the array segment */
  ensures |pw| == right + 1 - left
  ensures forall i: Int :: 0 <= i && i < |pw| ==> left <= pw[i] && pw[i] <= right
  ensures forall i: Int, j: Int :: 0 <= i && i < j && j < |pw| ==> pw[i] != pw[j]
  /* The array segment has been permuted */
  ensures permuted(a, left, pw)
{
  if (left == right) {
assume false
    /* If the list contains only one element, return it */
    // elem := loc(a, left).val
    idx := left
  } else {
    var pivotIndex: Int
    inhale left <= pivotIndex && pivotIndex <= right /* Non-det. choose a pivot index */

    pivotIndex, pw := partition(a, left, right, pivotIndex)
// assert forall i: Int :: left <= i && i < pivotIndex ==> loc(a, i).val   <  loc(a, pivotIndex).val
// assert forall i: Int :: pivotIndex < i && i <= right ==> loc(a, pivotIndex).val <= loc(a, i).val
    // assume  forall i: Int :: left <= i && i <= right ==> (
              // exists j: Int :: left <= j && j <= right && old(loc(a, i).val) == loc(a, j).val
            // )

    /* The pivot is in its final sorted position */

    if (n == pivotIndex) {
// assume false
      // elem := loc(a, n).val
      idx := n
    } elseif (n < pivotIndex) {
assume false
      // elem := select_rec(a, left, pivotIndex - 1, n)
      idx, pw := select_rec(a, left, pivotIndex - 1, n)
    } else {
assume false
      // elem := select_rec(a, pivotIndex + 1, right, n)
      idx, pw := select_rec(a, pivotIndex + 1, right, n)
    }
  }
}
