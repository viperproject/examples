/////////////////////////////////////////////////////////////////////
//This is a snaphost of DLL.sil for a bug report Silver Issue #93 

/////////////////////////////////////////////////////////////////////
//LinkedListNode

field DLLN_val : Int
field DLLN_next : Ref
field DLLN_prev : Ref

predicate DLLSEG(start : Ref, end:Ref)
{
	start!=end ==> (
		acc(start.DLLN_val) && 
		acc(start.DLLN_next) && 
		acc(start.DLLN_prev) && 
		(start.DLLN_next==null ==> end == null) &&
		(
			start.DLLN_next!=null ==> (
				acc(DLLSEG(start.DLLN_next,end),write) &&
				(start.DLLN_next!=end ==> DLLSEG_prev(start.DLLN_next,end) == start)
			)
		)
	)
}

function DLLSEG_aVal(start : Ref,end:Ref) : Seq[Int]
	requires start!=null 
	requires acc(DLLSEG(start,end),wildcard)
	ensures start!=end ==> |result|>0
	ensures start==end ==> result == Seq[Int]()
{
	(start == end) ? Seq[Int]() :
	unfolding acc(DLLSEG(start,end),wildcard) in 
		Seq(start.DLLN_val) ++ ( (start.DLLN_next == null ) ?  Seq[Int]() :  DLLSEG_aVal(start.DLLN_next,end) )
}

function DLLSEG_last(start : Ref,end:Ref) : Ref
	requires start!=null
	requires start!=end
	requires acc(DLLSEG(start,end),wildcard)
	ensures result != null
//	ensures |DLLSEG_aVal(start,end)| > 1 ==> result != start
	ensures |DLLSEG_aVal(start,end)|==1 ==> result==start
//	ensures result == DLLSEG_last_x(start,end,null)
	ensures let s == (DLLSEG_aNodes(start,end)) in (s[|s|-1] == result)
{
	unfolding acc(DLLSEG(start,end),wildcard) in 
		(start.DLLN_next == end) ? start : DLLSEG_last(start.DLLN_next,end)
}
function DLLSEG_prev(start : Ref,end:Ref) : Ref
	requires start!=null
	requires start!=end
	requires acc(DLLSEG(start,end),wildcard)
{
	unfolding acc(DLLSEG(start,end),wildcard) in 
		start.DLLN_prev
}

/////////////////////////////////////////////////////////////////////
//LinkedList
field DLL_head : Ref
field DLL_tail : Ref

predicate DLL(this : Ref)
{
	acc(this.DLL_head) && 
	acc(this.DLL_tail) && 
	(
		(this.DLL_head==null ==> (
			this.DLL_tail == null
		)) &&
		(this.DLL_head!=null ==> (
			acc(DLLSEG(this.DLL_head,null),write) &&
			this.DLL_tail == DLLSEG_last(this.DLL_head,null) &&
//			DLLSEG_prev(this.DLL_head,null) == null
			true
		))
	)
}

function DLL_aVal(this : Ref) : Seq[Int]
	requires this!=null && acc(DLL(this),write)
{
	unfolding acc(DLL(this),write) in 
		((this.DLL_head!=null) ? DLLSEG_aVal(this.DLL_head,null) : Seq[Int]())
}

method DLL_make() returns (r:Ref)
	ensures r!=null
	ensures acc(DLL(r),write)
{
	r := new(DLL_head,DLL_tail)
	r.DLL_head:=null
	r.DLL_tail:=null
	fold DLL(r)
}

method DLL_prepend(this : Ref,x : Int) 
	requires this!=null
	requires acc(DLL(this),write)
	ensures acc(DLL(this),write)
	ensures DLL_aVal(this) == Seq(x) ++ old(DLL_aVal(this))
	ensures exists r : Ref :: DLL_aNodes(this) == Seq(r) ++ old(DLL_aNodes(this))
{
	var n : Ref
	n := new(DLLN_val,DLLN_next,DLLN_prev)
	n.DLLN_val := x
	n.DLLN_prev := null
	
	unfold DLL(this)
	n.DLLN_next := this.DLL_head
	var nn : Ref
	nn := n.DLLN_next
	if (nn!=null)
	{
		unfold acc(DLLSEG(nn,null),write)
		nn.DLLN_prev := n
		fold acc(DLLSEG(nn,null),write)
		assert DLLSEG_last(nn,null)==old(unfolding acc(DLL(this),write) in DLLSEG_last(this.DLL_head,null)) //cannot remove this assertion
		assert old( DLL_aVal(this)) == DLLSEG_aVal(nn,null)
		assert old( DLL_aNodes(this)) == DLLSEG_aNodes(nn,null)
//		assume false
	}else
	{
		this.DLL_tail := n
		assert this.DLL_head!=null ==> DLLSEG_aNodes(this.DLL_head,null) == old(unfolding acc(DLL(this),write) in old(DLLSEG_aNodes(this.DLL_head,null)))
		assert this.DLL_head!=null ==> DLL_aNodes(this) == Seq(n) ++ old(DLL_aNodes(this))
//		assume false
	}
	fold DLLSEG(n,null)
	this.DLL_head := n
	assert DLLSEG_aNodes(this.DLL_head,null) == Seq(n) ++ old(DLL_aNodes(this))
	fold DLL(this)
}

method DLL_append(this : Ref,x : Int)
	requires this!=null
	requires acc(DLL(this),write)
	ensures acc(DLL(this),write)
	ensures DLL_aVal(this) == old(DLL_aVal(this)) ++ Seq(x)
{
	var n : Ref
	n := new(DLLN_val,DLLN_next,DLLN_prev)
	n.DLLN_val := x
	n.DLLN_next := null
	
	unfold DLL(this)
	n.DLLN_prev := this.DLL_tail
	var nn : Ref
	nn := n.DLLN_prev
	if (nn!=null)
	{
		aunfold_DLLSEG_End(this.DLL_head,null,nn)
		unfold acc(DLLSEG(nn,null),write)
		nn.DLLN_next := n
		fold acc(DLLSEG(n,n),write)
		fold acc(DLLSEG(nn,n),write)

		merge_DLLSEG(this.DLL_head,nn,n)
		fold acc(DLLSEG(n,null),write)
		merge_DLLSEG(this.DLL_head,n,null)
	}else
	{
		this.DLL_head := n
		fold DLLSEG(this.DLL_head,null)
	}
	this.DLL_tail := n
	fold DLL(this)
}

method DLLSEG_last_lemma(start : Ref, end : Ref)
	requires start!=null
	requires start!=end
	requires acc(DLLSEG(start,end),write)
	ensures  acc(DLLSEG(start,end),write)
	ensures DLLSEG_last(start,end)==old(DLLSEG_last(start,end))
	ensures DLLSEG_aVal(start,end)==old(DLLSEG_aVal(start,end))
	ensures DLLSEG_prev(start,end)==old(DLLSEG_prev(start,end))
	ensures |DLLSEG_aVal(start,end)|>1 ==> DLLSEG_last(start,end) != start
{
	unfold acc(DLLSEG(start,end),write)
	if (start.DLLN_next==end)
	{
	}else{
		DLLSEG_last_lemma_x(start.DLLN_next,end,start)
	}
	fold acc(DLLSEG(start,end),write)
}

method DLLSEG_last_lemma_x(start : Ref, end : Ref,x:Ref)	
	requires start!=null
	requires start!=end
	requires acc(DLLSEG(start,end),1/100)
	requires x!=null
	requires acc(x.DLLN_val,write)
	ensures acc(x.DLLN_val,write)
	ensures x.DLLN_val == old(x.DLLN_val)
	ensures acc(DLLSEG(start,end),1/100)
	ensures x != DLLSEG_last(start,end)
	ensures DLLSEG_last(start,end)==old(DLLSEG_last(start,end))
	ensures DLLSEG_aVal(start,end)==old(DLLSEG_aVal(start,end))
	ensures DLLSEG_prev(start,end)==old(DLLSEG_prev(start,end))
{
	unfold acc(DLLSEG(start,end),1/100)
	if (start.DLLN_next==end)
	{
		assert start!=x
		fold acc(DLLSEG(start,end),1/100)
		assert x!=DLLSEG_last(start,end)
	}else{
		DLLSEG_last_lemma_x(start.DLLN_next,end,x)
		fold acc(DLLSEG(start,end),1/100)
	}
	assert x!=DLLSEG_last(start,end)
}

//ghost
method aunfold_DLLSEG_End(start : Ref,end : Ref, p:Ref)
	requires start!=null
	requires start!=end
	requires acc(DLLSEG(start,end),write)
	requires p == DLLSEG_last(start,end)
	ensures acc(DLLSEG(start,p),write)
	ensures acc(DLLSEG(p,end),write)
	ensures start!=p ==> DLLSEG_aVal(start, p) == old(DLLSEG_aVal(start,end)[..|DLLSEG_aVal(start,end)|-1])
	ensures DLLSEG_aVal(p,end)    == old(DLLSEG_aVal(start,end)[|DLLSEG_aVal(start,end)|-1..])
	ensures DLLSEG_last(p,end) == p
	ensures start!=p ==> DLLSEG_prev(start, p) == old(DLLSEG_prev(start,end))
	ensures start==p ==> DLLSEG_prev(p,end) == old(DLLSEG_prev(start,end))
//	ensures start!=old(DLLSEG_last(start,end)) ==> ( DLLSEG_prev(start, old(DLLSEG_last(start,end))) == old(DLLSEG_prev(start,end)) )
{
	DLLSEG_last_lemma(start,end)
	unfold acc(DLLSEG(start,end),write)
	if (start.DLLN_next==end)
	{
		fold acc(DLLSEG(start,end),write)
		fold acc(DLLSEG(start,start),write)
	}else{
		aunfold_DLLSEG_End(start.DLLN_next,end,p)
		fold acc(DLLSEG(start,p),write)
	}
}

//ghost
method merge_DLLSEG(start : Ref,middle : Ref, end:Ref)
	requires start!=null
	requires middle!=null
//	requires start!=middle
	requires middle!=end
	
	requires acc(DLLSEG(start,middle),write)
	requires acc(DLLSEG(middle,end),write)
	
	ensures acc(DLLSEG(start,end),write)
	ensures DLLSEG_aVal(start,end) == old(DLLSEG_aVal(start,middle) ++ DLLSEG_aVal(middle,end))
	ensures DLLSEG_last(start,end) == old(DLLSEG_last(middle,end))
{
	var rank : Int
	rank := |DLLSEG_aVal(start,middle)|
	if (start==middle)
	{
	}else{
		var l : Ref
		l := DLLSEG_last(start,middle)
		aunfold_DLLSEG_End(start,middle,l)
		var subRank1 : Int
		subRank1 := |DLLSEG_aVal(l,middle)|
		assert subRank1<rank
		merge_DLLSEG(l,middle,end)
		var subRank2 : Int
		subRank2 := |DLLSEG_aVal(start,l)|
		assert subRank2<rank
		merge_DLLSEG(start,l,end)
	}
}

method split_DLLSEG(start : Ref, middle:Ref, end : Ref)
	requires start!=null
	requires start!=end
	requires acc(DLLSEG(start,end),write)
	requires middle in DLLSEG_aNodes(start,end)
	ensures acc(DLLSEG(start,middle),write)
	ensures acc(DLLSEG(middle,end),write)
	ensures middle!=null ==> DLLSEG_aVal(start, middle) ++ DLLSEG_aVal(middle,end) == old(DLLSEG_aVal(start,end))
	ensures middle!=null ==> DLLSEG_aNodes(start, middle) ++ DLLSEG_aNodes(middle,end) == old(DLLSEG_aNodes(start,end))
	ensures start!=middle ==> DLLSEG_prev(start, middle) == old(DLLSEG_prev(start,end))
	ensures start==middle ==> DLLSEG_prev(middle,end)    == old(DLLSEG_prev(start,end))
	ensures |DLLSEG_aVal(start,middle)| == old(DLLSEG_index(start,end,middle))
	//	ensures start!=old(DLLSEG_last(start,end)) ==> ( DLLSEG_prev(start, old(DLLSEG_last(start,end))) == old(DLLSEG_prev(start,end)) )
{
	unfold acc(DLLSEG(start,end),write)
	if (start==middle)
	{
		fold acc(DLLSEG(start,middle),write)
		fold acc(DLLSEG(middle,end),write)
		assert |DLLSEG_aVal(start,middle)| == old(DLLSEG_index(start,end,middle))
	}else{
		assert Seq(start.DLLN_val) ++ DLLSEG_aVal(start.DLLN_next,end) == old(DLLSEG_aVal(start,end))
		assert DLLSEG_index(start.DLLN_next,end,middle)+1 == old(DLLSEG_index(start,end,middle))
		split_DLLSEG(start.DLLN_next, middle, end)
		fold acc(DLLSEG(start,middle),write)
		assert |DLLSEG_aVal(start,middle)| == old(DLLSEG_index(start,end,middle))
	}
}


//===========================================================================

function DLL_aNodes(this : Ref) : Seq[Ref]
	requires this!=null && acc(DLL(this),write)
{
	unfolding acc(DLL(this),write) in 
		((this.DLL_head!=null) ? DLLSEG_aNodes(this.DLL_head,null) : Seq[Ref]())
}



//===========================================================================
//===========================================================================
field DLLI_node : Ref
field DLLI_aDLL : Ref

predicate DLLI(this:Ref) {
	this!=null &&
	acc(this.DLLI_node,write) &&
	this.DLLI_node!=null &&
	acc(this.DLLI_aDLL,write) &&
	this.DLLI_aDLL!=null
}

function DLLI_inDLL(this : Ref) : Bool
	requires acc(DLLI(this))
	requires acc(DLL(DLLI_DLL(this)))
{
	unfolding DLLI(this) in this.DLLI_node in DLL_aNodes(this.DLLI_aDLL)
}
	
function DLLI_DLL(this : Ref) : Ref
	requires acc(DLLI(this))
	ensures result != null
{
	unfolding DLLI(this) in this.DLLI_aDLL
}

function DLLI_index(this : Ref) : Int
	requires acc(DLLI(this))
	requires acc(DLL(DLLI_DLL(this)),write)
	requires DLLI_inDLL(this)
{
	unfolding DLLI(this)
		in unfolding DLL(this.DLLI_aDLL)
		in DLLSEG_index(this.DLLI_aDLL.DLL_head, null, this.DLLI_node)
}

function DLLSEG_aNodes(start : Ref,end:Ref) : Seq[Ref]
	requires start!=null 
	requires acc(DLLSEG(start,end),wildcard)
	ensures start!=end ==> |result|>0
	ensures start==end ==> result == Seq[Ref]()
{
	(start == end) ? Seq[Ref]() :
	unfolding acc(DLLSEG(start,end),wildcard) in 
		Seq(start) ++ ( (start.DLLN_next == null ) ?  Seq[Ref]() :  DLLSEG_aNodes(start.DLLN_next,end) )
}

function DLLSEG_index(start : Ref, end : Ref, node:Ref) : Int
	requires start!=null
	requires acc(DLLSEG(start,end))
	requires node in DLLSEG_aNodes(start,end)
	ensures DLLSEG_aNodes(start,end)[0]==node ==> result==0
	ensures start==node ==> DLLSEG_aNodes(start,end)[result]==node
	ensures start!=node ==> unfolding DLLSEG(start,end) in DLLSEG_aNodes(start.DLLN_next,end)[result-1]==node
	ensures start!=node ==> DLLSEG_aNodes(start,end)[result] == unfolding DLLSEG(start,end) in Seq(start)++DLLSEG_aNodes(start.DLLN_next,end)
	ensures start!=node ==> DLLSEG_aNodes(start,end)[result]==node
	ensures DLLSEG_aNodes(start,end)[result]==node
	ensures forall i : Int :: (i>=0 && i<result) ==> DLLSEG_aNodes(start,end)[i] != node
{
	unfolding DLLSEG(start,end) in (start==node) ? 0 : DLLSEG_index(start.DLLN_next,end,node)+1
}

method DLL_getIterator(this : Ref) returns (r : Ref)
	requires this!=null
	requires acc(DLL(this))
	requires |DLL_aVal(this)| > 0
	ensures acc(DLL(this))
	ensures acc(DLLI(r))
	ensures DLLI_DLL(r)==this
	ensures DLLI_inDLL(r)
	ensures DLLI_index(r)==0
{
	r := new (DLLI_node,DLLI_aDLL)
	r.DLLI_aDLL := this
	unfold DLL(this)
	r.DLLI_node := this.DLL_head
	fold DLL(this)
	fold DLLI(r)
}

method DLLI_getValue(this : Ref) returns (r :  Int)
	requires this!=null
	requires acc(DLLI(this))
	requires acc(DLL(DLLI_DLL(this)))
	requires DLLI_inDLL(this)
	ensures acc(DLLI(this))
	ensures acc(DLL(DLLI_DLL(this)))
	ensures DLLI_DLL(this)!=null
	ensures r == old(DLL_aVal(DLLI_DLL(this))[DLLI_index(this)])
{
	assert DLLI_DLL(this)!=null
	var i : Int
	i := DLLI_index(this)

	unfold acc(DLLI(this),write)
	unfold acc(DLL(this.DLLI_aDLL),write)
	split_DLLSEG(this.DLLI_aDLL.DLL_head,this.DLLI_node,null)
	assert i == |DLLSEG_aVal(this.DLLI_aDLL.DLL_head,this.DLLI_node)|
	
	unfold acc(DLLSEG(this.DLLI_node,null))
	r := this.DLLI_node.DLLN_val
	fold acc(DLLSEG(this.DLLI_node,null))
	merge_DLLSEG(this.DLLI_aDLL.DLL_head,this.DLLI_node,null)
	fold acc(DLL(this.DLLI_aDLL),write)
	fold acc(DLLI(this),write)
	assert DLLI_DLL(this)!=null
	
	assert r == old(DLL_aVal(DLLI_DLL(this))[DLLI_index(this)])
}


/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
//Leftovers

/*
function DLLSEG_last_x(start : Ref,end:Ref,x:Ref) : Ref
	requires start!=null
	requires start!=end
	requires acc(DLLSEG(start,end),write)
	requires x!=null ==> acc(x.DLLN_next,write)
//	ensures acc(x.DLLN_val,write) //70/100)
//	ensures x.DLLN_val==old(x.DLLN_val)
//	ensures result != null
//	ensures result == DLLSEG_last(start,end)
	ensures x!=null ==> result != x

//	ensures |DLLSEG_aVal(start,end)| > 1 ==> result != x
//	ensures |DLLSEG_aVal(start,end)|==1 ==> result==x
{
	unfolding acc(DLLSEG(start,end),write) in 
		(start.DLLN_next == end) ? start : DLLSEG_last_x(start.DLLN_next,end,x)
}
*/
